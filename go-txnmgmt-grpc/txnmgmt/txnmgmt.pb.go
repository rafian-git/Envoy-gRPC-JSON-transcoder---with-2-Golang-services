// Code generated by protoc-gen-go. DO NOT EDIT.
// source: txnmgmt.proto

/*
Package txnmgmt is a generated protocol buffer package.

It is generated from these files:
	txnmgmt.proto

It has these top-level messages:
	CurBlnc
	UserId
	TxnInfo
	Amount
*/
package txnmgmt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// for get balance
type CurBlnc struct {
	UserId  string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Balance int64  `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
}

func (m *CurBlnc) Reset()                    { *m = CurBlnc{} }
func (m *CurBlnc) String() string            { return proto.CompactTextString(m) }
func (*CurBlnc) ProtoMessage()               {}
func (*CurBlnc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CurBlnc) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CurBlnc) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type UserId struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *UserId) Reset()                    { *m = UserId{} }
func (m *UserId) String() string            { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()               {}
func (*UserId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserId) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// for transaction up & down
type TxnInfo struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *TxnInfo) Reset()                    { *m = TxnInfo{} }
func (m *TxnInfo) String() string            { return proto.CompactTextString(m) }
func (*TxnInfo) ProtoMessage()               {}
func (*TxnInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TxnInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TxnInfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Amount struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *Amount) Reset()                    { *m = Amount{} }
func (m *Amount) String() string            { return proto.CompactTextString(m) }
func (*Amount) ProtoMessage()               {}
func (*Amount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Amount) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*CurBlnc)(nil), "txnmgmt.CurBlnc")
	proto.RegisterType((*UserId)(nil), "txnmgmt.userId")
	proto.RegisterType((*TxnInfo)(nil), "txnmgmt.txnInfo")
	proto.RegisterType((*Amount)(nil), "txnmgmt.amount")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TxnManagement service

type TxnManagementClient interface {
	GetBalance(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*CurBlnc, error)
	TxnUp(ctx context.Context, in *TxnInfo, opts ...grpc.CallOption) (*Amount, error)
	TxnDown(ctx context.Context, in *TxnInfo, opts ...grpc.CallOption) (*Amount, error)
}

type txnManagementClient struct {
	cc *grpc.ClientConn
}

func NewTxnManagementClient(cc *grpc.ClientConn) TxnManagementClient {
	return &txnManagementClient{cc}
}

func (c *txnManagementClient) GetBalance(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*CurBlnc, error) {
	out := new(CurBlnc)
	err := grpc.Invoke(ctx, "/txnmgmt.TxnManagement/getBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txnManagementClient) TxnUp(ctx context.Context, in *TxnInfo, opts ...grpc.CallOption) (*Amount, error) {
	out := new(Amount)
	err := grpc.Invoke(ctx, "/txnmgmt.TxnManagement/txnUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txnManagementClient) TxnDown(ctx context.Context, in *TxnInfo, opts ...grpc.CallOption) (*Amount, error) {
	out := new(Amount)
	err := grpc.Invoke(ctx, "/txnmgmt.TxnManagement/txnDown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TxnManagement service

type TxnManagementServer interface {
	GetBalance(context.Context, *UserId) (*CurBlnc, error)
	TxnUp(context.Context, *TxnInfo) (*Amount, error)
	TxnDown(context.Context, *TxnInfo) (*Amount, error)
}

func RegisterTxnManagementServer(s *grpc.Server, srv TxnManagementServer) {
	s.RegisterService(&_TxnManagement_serviceDesc, srv)
}

func _TxnManagement_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxnManagementServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txnmgmt.TxnManagement/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxnManagementServer).GetBalance(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxnManagement_TxnUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxnManagementServer).TxnUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txnmgmt.TxnManagement/TxnUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxnManagementServer).TxnUp(ctx, req.(*TxnInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxnManagement_TxnDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxnManagementServer).TxnDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txnmgmt.TxnManagement/TxnDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxnManagementServer).TxnDown(ctx, req.(*TxnInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _TxnManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "txnmgmt.TxnManagement",
	HandlerType: (*TxnManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBalance",
			Handler:    _TxnManagement_GetBalance_Handler,
		},
		{
			MethodName: "txnUp",
			Handler:    _TxnManagement_TxnUp_Handler,
		},
		{
			MethodName: "txnDown",
			Handler:    _TxnManagement_TxnDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "txnmgmt.proto",
}

func init() { proto.RegisterFile("txnmgmt.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xc9, 0xc4, 0x16, 0x03, 0xc3, 0x11, 0x70, 0xab, 0x1d, 0xc3, 0x92, 0x83, 0x8c, 0x1d,
	0x1a, 0xd0, 0x93, 0xdb, 0xad, 0x0a, 0x32, 0x44, 0x90, 0xa1, 0x17, 0x6f, 0x59, 0x17, 0xcb, 0xa0,
	0x79, 0x29, 0x6d, 0xca, 0x0a, 0xe2, 0xc5, 0xaf, 0xe0, 0x47, 0xf3, 0x2b, 0xf8, 0x1d, 0xbc, 0x4a,
	0x9b, 0xd4, 0xcd, 0xc3, 0xc0, 0x53, 0xde, 0x3f, 0xbc, 0xff, 0x2f, 0xef, 0xfd, 0x83, 0xbb, 0xba,
	0x02, 0x99, 0x48, 0x1d, 0x66, 0xb9, 0xd2, 0x8a, 0xb8, 0x56, 0xfa, 0xe7, 0x89, 0x52, 0x49, 0x2a,
	0x78, 0xb6, 0x66, 0xa6, 0x62, 0x75, 0xc9, 0x01, 0x94, 0xe6, 0x7a, 0xad, 0xa0, 0x30, 0x06, 0x3a,
	0xc3, 0xee, 0x75, 0x99, 0x47, 0x29, 0xc4, 0xa4, 0x8f, 0x9d, 0xb2, 0x10, 0xf9, 0x7c, 0xe5, 0xa1,
	0x00, 0x8d, 0x8f, 0x16, 0x56, 0x11, 0x0f, 0xbb, 0x4b, 0x9e, 0x72, 0x88, 0x85, 0xd7, 0x09, 0xd0,
	0xf8, 0x60, 0xd1, 0x4a, 0x1a, 0xb4, 0x8e, 0x7d, 0x5e, 0x7a, 0x85, 0xeb, 0x89, 0xe6, 0xf0, 0xa2,
	0xf6, 0xe2, 0xfb, 0xd8, 0xe1, 0x52, 0x95, 0xa0, 0x2d, 0xdd, 0xaa, 0x1a, 0x6e, 0xaa, 0x9d, 0x0e,
	0xb4, 0xdb, 0x71, 0xf1, 0x8d, 0x70, 0xf7, 0xb1, 0x82, 0x7b, 0x0e, 0x3c, 0x11, 0x52, 0x80, 0x26,
	0x0f, 0x18, 0x27, 0x42, 0x47, 0x66, 0x3c, 0x72, 0x1c, 0xb6, 0xe1, 0x98, 0xa7, 0xfc, 0xde, 0xef,
	0x85, 0xdd, 0x99, 0x9e, 0xbd, 0x7f, 0x7e, 0x7d, 0x74, 0x4e, 0xc9, 0x80, 0xd5, 0x2d, 0x05, 0xb3,
	0x9b, 0xb1, 0x57, 0xe3, 0x78, 0x23, 0xb7, 0xf8, 0x50, 0x57, 0xf0, 0x94, 0x91, 0xad, 0xd7, 0x2e,
	0xe4, 0x6f, 0xf1, 0x76, 0xe2, 0x61, 0x03, 0x3b, 0xa1, 0x3d, 0xa6, 0x73, 0x0e, 0x05, 0x8f, 0x9b,
	0xa0, 0x59, 0x99, 0x4d, 0xd1, 0x84, 0xdc, 0x35, 0x49, 0xdc, 0xa8, 0x0d, 0xfc, 0x07, 0x35, 0x6a,
	0x50, 0x03, 0x4a, 0xfe, 0xa2, 0x56, 0x6a, 0x03, 0x53, 0x34, 0x89, 0x46, 0xcf, 0x43, 0x51, 0x71,
	0x99, 0xa5, 0x22, 0x8c, 0x95, 0x64, 0xd6, 0x3c, 0xb3, 0xe7, 0xd2, 0x69, 0xfe, 0xf6, 0xf2, 0x27,
	0x00, 0x00, 0xff, 0xff, 0xcf, 0x37, 0xde, 0x02, 0x1d, 0x02, 0x00, 0x00,
}
